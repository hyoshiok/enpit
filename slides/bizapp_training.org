#+STARTUP: latexpreview

#+LATEX_CLASS: beamer_lecture
#+LaTeX_CLASS_OPTIONS: [t, aspectratio=169]
# #+LaTeX_CLASS_OPTIONS: [t]

#+OPTIONS: H:3
#+OPTIONS: toc:nil
#+OPTIONS: ^:nil
#+OPTIONS: *:t

# #+BEAMER_THEME: Madrid
#+BEAMER_THEME: Berkeley
# #+BEAMER_COLOR_THEME: spruce
#+BEAMER_COLOR_THEME: seahorse
#+BEAMER_INNER_THEME: rectangles

#+TITLE: コラボレイティブ開発特論
#+AUTHOR: 中鉢 欣秀
#+DATE: 2015-09-21

#+LATEX_HEADER: \institute[AIIT]{産業技術大学院大学(AIIT)}

#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)
#+PROPERTY: BEAMER_col_ALL 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.0 :ETC

* 第1章 モダンなソフトウエア開発の道具達
** 連絡事項
*** 連絡事項(1)
**** 資料等の入手先
     - GitHubの下記リポジトリにまとめておきます
       - [[https://github.com/ychubachi/enpit][ychubachi/enpit]]
     - 資料は随時updateするので，適宜，最新版をダウンロードしてください
**** Twitterのハッシュタグ
     - Twitterのハッシュタグは =#enpit_aiit= を使ってください
     - まとめサイトなど作ってくれると嬉しいです
       - 昨年の例 -> [[http://togetter.com/li/558221][enPiT BizApp AIIT ビジネスアプリケーション演習 1日目 - Togetterまとめ]]
*** 連絡事項(2)
**** 仮想環境（Vagrant）
     - 各自のPCに仮想環境をインストールしておいてください
       - PCを持ってない方には貸出も可能です（数量限定）
     - インストール方法については下記を参照
       - [[https://github.com/ychubachi/enpit/blob/master/slides/preparation.org][enpit/preparation.org at master · ychubachi/enpit]]
** 授業の全体像
*** 学習目標と目的
**** 目標
     - ビジネスアプリケーションを構築するための基礎力
     - 分散型PBLを実施する上で必要となる知識やツールの使い方
     - これら活用するための自己組織的なチームワーク 
**** 目的
     - 分散ソフトウェア開発のための道具を学ぶ
       - 開発環境（Ruby），VCSとリモートリポジトリ（GitHub）
       - テスト自動化，継続的インテグレーション，PaaS
*** 前提知識と到達目標
**** 前提とする知識
     - 情報系の学部レベルで基礎的な知識を持っていること
**** 最低到達目標
     - 授業で取り上げる各種ツールの基本的な使い方を身につける
**** 上位到達目標
     - 授業で取り上げる各種ツールの高度な使い方に習熟する．
*** 授業の形態
**** 対面授業
     - 担当教員による講義・演習
**** 個人演習
     - 個人によるソフトウエア開発
**** グループ演習
     - グループによるソフトウエア開発
** 授業の方法
*** 講義・演習・課題
**** 講義
     - ツールの説明
     - ツールの使い方
**** 演習
     - 個人でツールを使えるようになる
     - グループでツールを使えるようになる
*** 成績評価
**** 課題
     - 個人でソフトウエアを作る
     - グループでソフトウエアを作る
**** 評価の方法
      - 課題提出と実技試験
**** 評価の観点
      - 分散PBLで役に立つ知識が習得できたかどうか
** 「学びの共同体」
*** 共に学び、共に教える「場」
    - この教室に集うメンバーは学びの共同体である
    - 他人に教えることは、優れた学びの方法の一つ
    - 困った時には助けを求める
*** 自己紹介
    - 教員
      - [[https://github.com/ychubachi/enpit/raw/master/slides/self_introduction.pdf][自己紹介]]
    - 履修者
      - 名前（可能であれば所属も）
      - どんな仕事をしているか（あるいは大学で学んだこと）
      - この授業を履修した動機
** モダンなソフトウエア開発とは
*** ソフトウエア開発のための方法・言語・道具

#+CAPTION: The Framework-Language-Tool framework.
#+NAME: FLT_framework
#+ATTR_LATEX: :width 0.6\textwidth
[[./figures/FLT_framework.pdf]]
*** 授業で取り上げる範囲
**** 取り上げること
     - 方法を支えるための道具
     - 良い道具には設計概念として方法論が組み込まれている
     - 道具はプログラミング言語を問わない
**** 取り扱わないこと
     - 方法論そのものについてはアジャイル開発特論で学ぶ
     - 言語の備えるエコシステムについては必要な範囲で学ぶ
     - プログラミングの初歩については教えない
*** Scrumするための道具

#+CAPTION: The modern tools for Scrum developments.
#+NAME: tools
#+ATTR_LATEX: :width 0.6\textwidth
[[./figures/tools.pdf]]

*** モダンな開発環境の全体像
**** 仮想化技術（Virtualization）
     - WindowsやMacでLinux上でのWebアプリケーション開発を学ぶことができる
     - HerokuやTravis CI等のクラウドでの実行や検査環境として用いられている
**** ソーシャルコーディング（Social Coding）
     - LinuxのソースコードのVCSとして用いられているGitを学ぶ
     - GitはGitHubと連携することでOSS型のチーム開発ができる

*** enPiT仮想化環境
**** インストール済みの言語と道具
     - エディタ（Emacs/Vim）
     - Rubyの実行環境
     - GitHub，Heroku，Travis CIと連携するための各種コマンド（github-connect.sh，hub，heroku，travis）
     - PostgreSQLのクライアント・サーバーとDB
     - 各種設定ファイル（.bash_profile，.gemrc，.gitconfig）
     - その他
**** 仮想化環境の構築用リポジトリ（参考）
     - [[https://github.com/ychubachi/vagrant_enpit][ychubachi/vagrant_enpit]]
** 準備作業
*** クラウドのアカウント作成
**** GitHub
     - [[[https://github.com/join][Join GitHub · GitHub]]]
**** Heroku
     - [[[https://id.heroku.com/signup][Heroku - Sign up]]]
**** Travis CI
     - [[[https://travis-ci.org/][Travis CI]]]
       - Travis CIは，GitHubのアカウントでログインできる
*** enPiT仮想化環境のアップデート
**** 作業内容
     - enPiT仮想化環境（vagrantのbox）を更新しておく
**** コマンド

#+begin_src bash
cd ~/enpit
vagrant destroy
vagrant box update
#+end_src
*** Port Forwardの設定
**** 説明
     - Guest OSで実行するサーバに，Host OSからWebブラウザでアクセスできるようにしておく
     - 任意のエディタでVagrantfileを変更
**** 変更前
#+begin_src ruby
  # config.vm.network "forwarded_port", guest: 80, host: 8080
#+end_src

**** 変更後
#+begin_src ruby
  config.vm.network "forwarded_port", guest: 3000, host: 3000
  config.vm.network "forwarded_port", guest: 4567, host: 4567
#+end_src

*** enPiT仮想化環境にログイン
**** 作業内容
     - 前の操作に引き続き，仮想化環境にSSH接続する
**** コマンド
#+begin_src bash
vagrant up
vagrant ssh
#+end_src

*** github-connectスクリプト
**** URL
     - [[[https://gist.github.com/ychubachi/6491682][github-connect.sh]]]
**** git conifgを代行
     - GitHubにログインし，名前とemailを読み込んでgitに設定
**** SSHの鍵生成と登録
     - SSH鍵を作成し，公開鍵をGitHubに登録してくれる
*** github-connect.shの実行
**** 作業内容
     - スクリプトを起動し，設定を行う
     - GitHubのログイン名とパスワードを聞かれるので，入力する
     - rsa key pairのパスフレーズは入力しなくて構わない
**** コマンド

#+begin_src bash
github-connect.sh
#+end_src

*** GitとGitHubの設定確認     
**** Gitの設定確認
#+begin_src bash
git config --list
#+end_src
**** GitHubの設定確認
     - ブラウザでGitHubのSSH Keyページを開く

* 第2章 Git/GitHubの基本操作
** ローカルリポジトリ
*** Gitのローカルリポジトリの作成
**** ローカルリポジトリ
     - ソースコードや各種のファイルを保存し，開発に利用する
     - 「 =my_enpit= 」というディレクトリを作成し，初期化する
**** コマンド

#+begin_src bash
mkdir ~/my_enpit
cd ~/my_enpit
git init
#+end_src

*** Gitの設定ディレクトリ
**** 隠しフォルダ「 =.git= 」
     - Gitソースコードの履歴情報や，各種の設定をGitが保存するディレクトリ
     - このフォルダは通常，Gitを経由しないで変更することはない
**** 確認方法

#+begin_src bash
ls -a
find .git
#+end_src

** リモートリポジトリ
*** Hubコマンド
**** enPiT環境のHubコマンド
    - [[https://github.com/github/hub][github/hub]]
**** GitへのGitHub操作機能追加
    - 通常のGitの機能に加えて，GitHub用のコマンドが利用できる
    - エイリアス設定しており，コマンド名は「git」のまま
**** 確認方法

#+begin_src bash
git version
alias git
#+end_src

*** Hubコマンドによるリモートリポジトリの作成
**** 作業内容
     - コマンドライン操作で，GitHubにリポジトリを作成する
     - Hubコマンドの機能である =git create= を利用
     - 初回既動時にはパスワードか聞かれる
**** コマンド

#+begin_src bash
git create
#+end_src

*** リポジトリの確認方法
**** 確認方法
    - WebブラウザでGitHubを開き，「 =my_enpit= 」ができていることを確認
**** コマンドラインで確認

#+begin_src bash
git remote -vv
#+end_src
** GitとGitHubの基本操作
*** Gitの操作方法
**** マニュアル等
     - [[http://git-scm.com/doc][Git - Documentation]]
**** commitログの書き方
     - [[https://github.com/erlang/otp/wiki/Writing-good-commit-messages][Writing good commit messages · erlang/otp Wiki]]
*** ステータスの確認
**** リポジトリの状態を確認する
     - =git status= は，頻繁に利用するコマンド
     - リポジトリの状態を確認することができる
     - この表示の読み方を理解することが重要
**** コマンド
#+begin_src bash
git status
#+end_src

*** ファイルの追加とステータスの確認
**** 作業内容
     - テキストエディタで =README.md= を作成
     - ステータスの変化を見る
**** コマンド
#+begin_src bash
emacs README.md
git status
#+end_src

*** Add/Commitの方法
**** ステージングエリアを利用する場合
     - git add README.mb
     - git commit -m 'First commit'
**** ステージングエリアを省略する場合
     - git commit -a -m 'First commit'
       - トラックされていないファイルはcommitしないので注意

*** リモートリポジトリへの公開
**** pushとは？
     - ローカルで作成したcommitを，リモートのリポジトリにアップロードすること
     - originとは，リモートのリポジトリの内部的な名前
     - upstreamとは，ブランチ（後述）が紐づいているリポジトリのこと
     - 最初にそのブランチをpushするときは， =--setupstream= オプションを指定
**** コマンド
#+begin_src bash
git push --set-upstream origin master
#+end_src

*** Logの閲覧
**** コミットログ
     - ソースコードに加えた変更の履歴を，commitを単位として閲覧できる
**** コマンド
#+begin_src bash
git log
#+end_src

*** コミットのログを詳細に書く方法
**** エディタを使ったログの記述
    - コミットのログや，Pull Requestの記述を，より詳しく書くことができる
    - =commit= や =pull_request= から  =-m= オプションを外すと，エディタが立ち上がる
      - エディタはemacsを起動するようになっている
      - =C-x C-s= で保存， =C-x C-c= で終了
**** コマンド
#+begin_src bash
git commit
git pull_request
#+end_src

** 演習課題
*** 演習課題2-1
**** Init/Status/Addの練習
     1. 解説した手順に従い，my_enpitリポジトリを作成
     2. git statusコマンドを実行
     3. README.mdファイルを作成しなさい
     4. git statusコマンドを実行し，変化を見なさい
     5. commitしなさい．ログを必ず書くこと
     6. git statusコマンドを実行し，変化を見なさい
*** 演習課題2-3
**** Commit/Log/Pushの練習
     1. README.mdを修正してcommitしなさい
     2. 新しいファイルを作成してcommitしなさい
     3. 作業が完了したら，pushしなさい（ =--set-upstream= が必要）
     4. コミットがpushされていることをWebブラウザで確認しなさい
     5. 作成したファイルを削除してcommitしてpushしなさい
     6. エディタを使って，詳細なログを書きなさい
     7. その他，自由にcommitの作業を試しなさい
*** 課題の提出
**** 提出物
     - 下記のものを提出してください
       - GitHubとHerokuアカウント
       - 作成したmy_enpitリポジトリのURL
**** 提出先
     - [[[https://docs.google.com/forms/d/1FJUpH52RNstvIuIsTkGQxn5XYAWWrY_G_0vE0eRjDV0/viewform?usp%3Dsend_form][コラボレイティブ開発特論(2015) アカウント等]]]

* 第3章 Gitのbranchの活用
** branchの操作
*** branchの作成
**** ブランチとは？
     - リポジトリにはmasterブランチがある
     - branchは自由に作成できる
     - branch = commit についた別名
**** コマンド

#+begin_src bash
git branch new_branch
git branch -vv
#+end_src

*** branchのcheckout
**** branchを切り替える
     - checkoutしてブランチを切り替える
     - ブランチをcommitすることができる
     - 切り替える前に，ブランチでの作業はcommitしておく（stashも可）
**** コマンド
#+begin_src bash
git checkout new_branch
<編集作業>
git commit -a -m 'Create a new branch'
#+end_src

*** branchの作成とcheckoutの省力化
**** 同時に行う方法
     - 作成してすぐチェックアウトする
     - 元いたbranchに戻る方法も併せて学ぼう
**** コマンド

#+begin_src bash
git checkout -b new_branch
git checkout -
#+end_src

*** 他のbranchをmergeする
**** mergeとは
     - ブランチで作業した内容（commit）を，他のブランチに統合すること
     - new_branchでの作業をmasterに統合する場合，最初にmasterをcheckoutする
**** コマンド操作
#+begin_src bash
git checkout master
git merge new_branch
#+end_src

*** Conflict（競合）とその解消
**** Conflictとは
     - branchで行う作業がかち合った場合，発生する
     - mergeする際，conflictが生じた場合，エラーになる
**** 解消方法
     - エディタ等で編集を行い，解消する
**** 参考文献
     - [[https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line][Resolving a merge conflict from the command line · GitHub Help]]
** リモートのブランチ
*** BranchのPush
**** リモートへのPush
    - BranchをGitHubにPushすることができる
    - masterブランチをPushした際と同様，upstreamを指定する
    - PushできたかどうかをWebブラウザで確認する

**** コマンド
#+begin_src bash
git push --set-upstream origin new_branch
#+end_src

** Pull Request
*** Pull Requestの作成
**** Pull Roquestとは？
     - pushしたbranchでの作業の統合（merge）を依頼する
     - hubコマンドの =pull-request= で発行できる

**** コマンド
#+begin_src bash
git pull-request -m 'Update a new branch'
#+end_src

*** Pull Requestのmerge
**** Pull Requestをレビューする
     - WebブラウザでPull Requestを確認する
**** ブラウザでmerge
     - 問題なければmergeボタンを押す
**** コマンドラインでmergeする場合
#+begin_src bash
git merge pull_request_URL
#+end_src

*** BranchのPull
**** BranchをPullするとは
     - リモートで行われた変更を適用すること
     - 内部的にはfetchでダウンロードしてからmergeする
**** コマンド
#+begin_src bash
git checkout master
git pull
#+end_src

** 演習課題
*** 演習課題3-1
**** branchの操作（ローカル）
    1. =my_enpit= リポジトリでブランチを作成しなさい（ =new_branch= ）
    2. =checkout= で =new_branch= に移動する
    3. ファイルを編集しcommitする
    4. =master= ブランチに移動してファイルの内容が
       「編集されていないこと」を確認しなさい
    5. =merge= して，変更を適用しなさい
*** 演習課題3-2
**** 競合の発生と解消
    1. =new_branch= でファイルを編集して，commitする
    2. =master= に移動し，ファイルの同じ箇所を編集して，commitする
    3. =master= に =new_branch= をmergeして，コンフリクトを発生させる
    4. エディタで競合箇所を修正してcommitする
*** 演習課題3-3
**** リモートのbranchの操作
    1. 新しいブランチを作成して，remoteにpushする
    2. Pull Requestを送る
    3. ブラウザで，Pull Requestをマージする
    4. =master= ブランチに移動して， =pull= することで，更新する
* 第4章 GitHubによる協同作業
** GitHub Flow
*** GitHub Flow (1)
   1. 思い立ったらブランチ作成
      - 新しい機能追加や，アイディアを試す
   2. ブランチにコミットを追加
      - 変更点をコミットとして作成
      - コミットのログは，他人が読んでわかるように書く
   3. Pull Requestを開く
      - コミットについて，意見交換ができる
      - 作業途中でPull Requestを出しても構わない
*** GitHub Flow (2)
   1. 議論とレビュー
      - レビューをしたり，質疑応答をしたりする
   2. マージしてディプロイ
      - レビュー（とテスト）が通ったら、 =master= ブランチにマージする
      - 「レビューが通ったか」どうかの条件はチームで決める
参考文献
   - [[https://guides.github.com/introduction/flow/index.html][Understanding the GitHub Flow · GitHub Guides]]

** OSSの開発に参加する
*** リモートのリポジトリをClone
**** Cloneとは
    - GitHubで公開されているリポジトリはだれでも複製（clone）できる
    - ソースコードはローカルにコピーされ，閲覧やコンパイルなどができるようになる
    - アクセス権限がない場合は，pushできない
**** コマンド
#+begin_src bash
git clone octocat/Spoon-Knife
#+end_src

*** オリジナルのリポジトリをForkする
**** Forkとは
     - Cloneしたリポジトリを，
       自分のアカウントが所持するリポジトリとして
       GitHub上で複製する
     - =remote= の値は，オリジナルのリポジトリが =origin= ，
       自分のリポジトリは自分のGitHubユーザ名になる
**** コマンド
#+begin_src bash
git fork
git remote -vv
#+end_src

*** ブランチを作成し自分のリポジトリにpush
**** オリジナルの改変等
     - 新しい機能追加等を行う場合，ブランチを作成する
     - ブランチは，自分のリポジトリにpushする
**** コマンド
#+begin_src bash
git branch my_branch
git checkout my_branch
# 編集
git commit -a -m 'Update'
git push -u ychubachi my_branch
#+end_src

*** Forkした元にPull Requestを送る
**** コードのレビューやマージを依頼する
     - 新しい機能ができたら，オリジナルにPull Requestを送り，
       レビューやマージをしてもらう
**** コマンド
#+begin_src bash
git pull_request -m 'Pull Request'
#+end_src

*** コンフリクトの解消
**** コンフリクトが発生したら
     - 作業中のブランチで次の作業を行う
**** コマンド（未確認）
#+begin_src bash
git fetch origin
git merge origin/master
# コンフリクト修正
git add .
git commit -m 'Fix conflict'
git push
#+end_src

*** Pull Requestをチェックアウト
**** Pull Requestのチェックアウト
     - 誰かが作成したPull Requestの内容を，ブランチとしてローカルにコピーする
     - 試しに動作させたり，コードをチェックするときなどに利用
**** コマンド
#+begin_src bash
git checkout https://github.com/octocat/Spoon-Knife/pull/3166
#+end_src

*** Fork以外の方法
    - リポジトリの Collaborators にメンバーを登録する
    - （masterを含め）branchを直接pushできるようになる
    - mergeの作業も、pull requestを出した本人ができる
** GitHubの他の機能
*** Issue/Wiki
**** Issue
    - 課題管理（ITS: Issue Tracking System）
    - コミットのメッセージでcloseできる
      - [[https://help.github.com/articles/closing-issues-via-commit-messages][Closing issues via commit messages · GitHub Help]]
**** Wiki
     - GitHubのリポジトリにWikiを作る
       - [[https://help.github.com/articles/about-github-wikis][About GitHub Wikis · GitHub Help]]
*** GitHub
**** GitHub Pages
     - 特殊なブランチを作成すると，Webページが構築できる
       - [[https://pages.github.com/][GitHub Pages]]
**** Git brame
     - だれがどの作業をしたかわかる（誰がバグを仕込んだのかも）
       - [[https://help.github.com/articles/using-git-blame-to-trace-changes-in-a-file][Using git blame to trace changes in a file · GitHub Help]]
** 演習課題
*** 演習課題4-1
**** ファイルを追加する
    1. =ychubachi/our_enpit= をgitコマンドでcloneし，forkする
    2. 新しいブランチを作成し，新規にファイルを追加する
       - 内容は任意（自己紹介など）
       - Markdownで書いてください（拡張子は.md）
    3. コミットを作成し，pull requestを送信する
    4. 教員がマージ作業を行います
       - コンフリクトが起きた時は各自で修正してください
       - コンフリクトが解消されない場合はマージしません
*** 演習課題4-2
**** 既存のファイルを変更する（オプション）
    1. 新しいブランチを作成する
    2. README.mdを改変して，pull requestを送信する
    3. 教員がマージ作業を行います
       - コンフリクトが起きた時は各自で修正してください
       - コンフリクトが解消されない場合はマージしません

*** 演習課題4-3
**** グループでの協同作業
     1. グループの代表者が新しくリポジトリを作成する（名称は任意）
     2. 他のメンバーにリポジトリ名を教え，forkしてもらい
        Pull Requestを送ってもらう
     3. マージしてあげる
     4. 2〜3を繰り返し，協同作業を行ってみよう

**** 終わったブループは…
     - リポジトリの Collaborators にメンバーを登録する方法も試す
     - どちらがやりやすいかメンバーで話し合ってみよう
*** 演習課題4-3
**** Issue/Wikiの利用
     - GitHubのIssueの機能を使ってみなさい
     - commitのログでIssueをクローズさせてみなさい
     - Wikiを作ってください
* 第5章 Sinatraアプリの開発
** Sinatraアプリケーションの作成
*** Sinatraを使った簡単なWebアプリケーション
**** Sinatraとは？
     - Webアプリケーションを作成するDSL
     - Railsに比べ軽量で，学習曲線が緩やか
**** 参考文献
     - [[http://www.sinatrarb.com/][Sinatra]]
       
*** Sinatraアプリ用リポジトリを作成する
**** 内容
     - Sinatraアプリを作成するため，新しいリポジトリを作る
**** コマンド
#+begin_src bash
mkdir ~/sinatra_enpit
cd ~/shinatra_enpit
git init
git create
#+end_src

*** Sinatraアプリを作成する
**** コマンド
#+begin_src bash
emacs hello.rb
git add hello.rb
git commit -m 'Create hello.rb'
#+end_src

**** コード: =hello.rb=
#+begin_src ruby
require 'sinatra'

get '/' do
  "Hello World!"
end
#+end_src

*** Sinatraアプリを起動する
**** 起動の方法
     - hello.rbをrubyで動かせば，サーバが立ち上がる
     - vagrantのport forwardを利用するためのオプションを追加する
       - [[http://stackoverflow.com/questions/21250885/unable-to-access-sinatra-app-on-host-machine-with-vagrant-forwarded-ports][ruby - Unable to access Sinatra app on host machine with Vagrant forwarded ports - Stack Overflow]]

**** コマンド
#+begin_src bash
ruby hello.rb -o 0.0.0.0
#+end_src

*** Sinatraアプリの動作確認
**** 動作確認の方法
     - Host OSのWebブラウザで，http://localhost:4567 にアクセスする．

*** Sinatraについて
    - [[http://www.sinatrarb.com/intro.html][Sinatra: README]]
** Herokuでアプリケーションを動かす
*** コマンドラインでHerokuにログインする
**** 内容
     - enPiT環境には =heroku= コマンドをインストールしてある
     - =heroku= コマンドを用いて，Herokuにログインできる
     - 以後の作業はHerokuコマンドを利用する
**** コマンド
#+begin_src bash
heroku login
#+end_src

*** herokuにSSHの公開鍵を設定する
**** 内容
     - Herokuもgitのリモートリポジトリである
     - ここに公開鍵でアクセスできるようにする
**** コマンド
#+begin_src bash
heroku keys:add
#+end_src
**** 確認
#+begin_src bash
heroku keys
#+end_src

*** Herokuで動作できるSinatraアプリ
**** 内容
     - Herokuで動作できるSinatraアプリと設定ファイルの例
       - [[https://devcenter.heroku.com/articles/rack#sinatra][Deploying Rack-based Apps | Heroku Dev Center]]
     - 例を見ながら，エディタを用いて，次の3つのファイルを作成する
       - =hello.rb= :: RubyによるWebアプリ本体（作成済み）
       - =config.ru= :: Webアプリサーバ（Rack）の設定
       - =Gemfile= :: アプリで利用するライブラリ（Gem）
**** コマンド
#+begin_src bash
emacs config.ru
emacs Gemfile
#+end_src

*** Bundle install
**** 内容
     - =Gemfile= の中身に基づき，必要なGem（ライブラリ）をダウンロードする
       - =Gemfile.lock= というファイルができる
       - このファイルもcommitの対象に含める
**** コマンド
#+begin_src bash
bundle install
#+end_src

*** アプリをGitHubにpushする
**** 内容
     - Herokuで動かす前に，commitが必要
     - ついでに，GitHubにコードをpushしておく
       - この場合のpush先は =origin master=
**** コマンド
#+begin_src bash
git add .
git commit -m 'Add configuration files for Heroku'
git push -u origin master
#+end_src

*** Herokuにアプリを作る
**** アプリを作る
     - Herokuが自動生成したURLが表示されるので，メモする
     - =git remote -v= でherokuという名前のremoteが追加されたことが分かる
     - WebブラウザでHerokuの管理画面を開くと，アプリができていることが確認できる

**** コマンド
#+begin_src bash
heroku create
git remote -v
#+end_src

*** Herokuにアプリを配備する
**** 配備する方法
     - Herokuのリモートリポジトリにpushする
     - WebブラウザでアプリのURLを開き，動作を確認する
**** コマンド
#+begin_src bash
git push heroku master
#+end_src

** 演習課題
*** 演習課題5-1
**** Sinatraアプリの作成
     - Sinatraアプリを作成して，Herokuで動作させなさい
     - SinatraのDSLについて調べ，機能を追加しなさい
     - コミットのログは詳細に記述し，どんな作業を行ったかが
       他の人にも分かるようにしなさい
     - 完成したコードはGitHubにもpushしなさい
*** 演習課題5-2 (1)
**** Sinatraアプリの共同開発
     - グループメンバーでSinatraアプリを開発しなさい
     - 代表者がGitHubのリポジトリを作成し他のメンバーを Collaborators に追加する
       - 他のメンバーは代表者のリポジトリをcloneする
     - 計画の時間でどんな機能をもたせるかを相談しなさい
       - メンバーのスキルに合わせて，できるだけ簡単なもの（DBは使わない）
     - GitHub Flowをチームで回す
       - ブランチを作成し，Pull Requestを送る
       - 他のメンバー（一人以上）からレビューを受けたら各自でマージ
*** 演習課題5-2 (2)
**** Sinatraアプリの共同開発（続き）
     - GitHubのURLとHerokuのURLを提出
       - http://goo.gl/forms/p1SXNT2grM
     - （計画5分＋スプリント10分）×3（or 4） セット
     - 最後、振り返りを5分行い、発表する

* 第6章 Ruby on Railsアプリの開発
** Ruby on Railsアプリの生成と実行
*** RoRを使ったWebアプリケーション
**** Ruby on Rails（RoR）とは？
     - Webアプリケーションを作成するためのフレームワーク
**** 参考文献
     - [[http://rubyonrails.org/][Ruby on Rails]]
       
*** Herokuで動かす方法
**** Getting Started
    - [[https://devcenter.heroku.com/articles/getting-started-with-rails4][Getting Started with Rails 4.x on Heroku | Heroku Dev Center]]

**** DBについて
    - DatabeseはPostgreSQLを使用する
      - RoR標準のsqliteは使わない

*** PostgreSQLにDBを作成
**** 開発で利用するDB
     - rails_enpit_development :: 開発作業中に利用
     - rails_enpit_test :: テスト用に利用
     - rails_enpit_production :: 本番環境で利用（ローカルには作成しない）
**** コマンド
#+begin_src bash
createdb rails_enpit_development
createdb rails_enpit_test
#+end_src

*** =rails_enpit= リポジトリを作成する
**** 内容
     - =rails= は予め，仮想化環境にインストールしてある
     - =rails new= コマンドを用いて，RoRアプリの雛形を作成する
**** コマンド

#+begin_src bash
rails new ~/rails_enpit --database=postgresql
cd ~/rails_enpit
git init
git create
git add .
git commit -m 'Generate a new rails app'
git push -u origin master
#+end_src

*** Gemfileの変更
**** 変更する内容
     - GemfileにRails内部で動作するJavaScriptの実行環境を設定する
     - 当該箇所のコメントを外す
**** 変更前
#+begin_src ruby
# gem 'therubyracer',  platforms: :ruby
#+end_src

**** 変更後
#+begin_src ruby
gem 'therubyracer',  platforms: :ruby
#+end_src

*** Bundle installの実行
**** =bundle install=
     - Gemfileを読み込み，必要なgemをインストールする
     - =rails new= をした際にも， =bundle install= は実行されている
     - 今回はtherubyracerと，それが依存しているgemでまだインストールしていないものをインストール
     - インストールする先は =~/.rbenv= 以下の特定のディレクトリ
**** コマンド
#+begin_src bash
bundle install
git commit -a -m 'Run bundle install'
#+end_src

*** Rails serverの起動
**** Rails serverを起動
     - この段階で，アプリケーションを起動できるようになっている
     - Host OSのWebブラウザで， =http://localhost:3000= にアクセスして確認
     - 端末にもログが表示される
     - 確認したら，端末でCtrl-Cを押してサーバを停止する
**** コマンド
#+begin_src bash
bin/rails server -b 0.0.0.0
#+end_src

** Controller/Viewの作成
*** Hello Worldを表示するController
**** Controllerとは？
     - MVC構造でいうController
     - HTTPのリクエストを処理し，Viewに引き渡す
     - =rails generate controller= コマンドで作成する
**** コマンド
#+begin_src bash
bin/rails generate controller welcome
#+end_src
*** Viewの作成
**** Viewとは？
     - HTML等で結果をレンダリングして表示する
     - =app/views/welcome/index.html.erb= を作成する
     - erbで作成するのが一般的で，内部でRubyコードを動作させることができる
**** =index.html.erb=
#+begin_src html
<h2>Hello World</h2>
<p>
  The time is now: <%= Time.now %>
</p>
#+end_src

*** rootとなるrouteの設定
**** Routeとは？
     - HTTPのリクエスト（URL）とコントローラを紐付ける設定
     - ここでは =root= へのリクエスト（ =GET /= ）を =welcome= コントローラの =index= メソッドに紐付ける
     - =rake routes= で確認する
**** =config/routes.rb= の当該箇所をアンコメント
#+begin_src ruby
root 'welcome#index'
#+end_src

*** ControllerとViewの動作確認
**** 動作確認の方法
    - 再度， =rails server= でアプリを起動する
    - Webブラウザで =http://localhost:3000/= を開いて確認する
**** コマンド
#+begin_src bash
bin/rails server -b 0.0.0.0
#+end_src

*** ここまでをコミットしておく
**** ここまでの内容
     - ここまでの作業で，controllerとviewを1つ備えるRoRアプリができた
     - 作業が一区切りしたので，commitする
       （commitはひとかたまりの作業に対して行う）
**** コマンド
#+begin_src bash
git add .
git commit -m 'Create welcome controller and view'
#+end_src

** Herokuにディプロイする
*** Gemfileの設定
**** Heroku用Gem
     - =Gemfile= に =rails_12factor= を追加する
     - Rubyのバージョンも指定しておく
     - =Gemfile= を変更したら必ず =bundle install= すること

**** =Gemfile= に追加する内容
#+begin_src ruby
gem 'rails_12factor', group: :production
ruby '2.2.2'
#+end_src

*** Gitにコミット
**** コミットする必要性
     - Herokuにコードを送るには，gitを用いる
     - ローカルで最新版をcommitしておく必要がある
     - ついでにGitHubにもpushしておく
**** コマンド
#+begin_src bash
git commit -a -m 'Set up for Heroku'
git push # origin master -> GitHub が省略されている
#+end_src

*** Herokuアプリの作成とディプロイ
**** 作成とディプロイ
     - =heroku= コマンドを利用してアプリを作成する
     - =heroku create= で表示されたURLを開く
     - =git push= でディプロイすると，Herokuからのログが流れてくる
**** コマンド

#+begin_src bash
heroku create
git push heroku master
#+end_src

** 演習課題
*** 演習課題6
**** RoRアプリの作成
     - ここまでの説明に従い，Herokuで動作するRoRアプリ（ =rails_enpit= ）を完成させなさい

* 第7章 DBを使うアプリの開発と継続的統合
** DBとScaffoldの作成
*** Scaffold
**** Scaffoldとは
     - [[https://www.google.co.jp/search?q=scaffold&client=ubuntu&hs=PiK&channel=fs&hl=ja&source=lnms&tbm=isch&sa=X&ei=smUdVKaZKY7s8AXew4LwDw&ved=0CAgQ_AUoAQ&biw=1195&bih=925][scaffold - Google 検索]]
     - RoRでは，MVCの雛形を作る
       - CRUD処理が全て実装される
     - 多くのコードが自動生成されるので，branchを切っておくと良い
       - 動作が確認できたらbranchをマージ
       - うまく行かなかったらbranchごと削除すれば良い
**** コマンド
#+begin_src bash
git checkout -b books
bin/rails generate scaffold book title:string author:string
#+end_src

*** DBのMigrate
**** migrateとは
    - Databaseのスキーマ定義の更新
    - Scaffoldを追加したり，属性を追加したりした際に行う
**** コマンド
#+begin_src bash
bin/rake db:migrate
#+end_src

*** routeの確認
**** route
     - ルーティングの設定を確認しよう
**** コマンド
#+begin_src bash
bin/rake routes
#+end_src

*** 動作確認
**** 動作確認の方法
     - Webブラウザで http://localhost:3000/books を開く
     - CRUD処理が完成していることを確かめる
**** コマンド
#+begin_src bash
bin/rails server
#+end_src

*** 完成したコードをマージ
**** ブランチをマージ
     - 動作確認できたので， =books= branchをマージする
     - 不要になったブランチは， =git branch -d= で削除する
**** コマンド
#+begin_src bash
git add .
git commit -m 'Generate books scaffold'
git checkout master
git merge books
git branch -d books
#+end_src

*** Herokuにディプロイ
**** ディプロイ
     - ここまでのアプリをディプロイする
     - herokuにあるdbもmigrateする
     - Webブラウザで動作確認する
**** コマンド
#+begin_src bash
git push heroku master
heroku run rake db:migrate
#+end_src

*** Scaffoldの作成を取り消す場合（参考）
**** 取り消す操作
    - migrationを取り消す
    - branchに一旦コミットして，masterブランチに移動
    - branchを削除
**** コマンド
#+begin_src bash
bin/rake db:rollback
git add .
git commit -m 'Rollback'
git checkout master
git branch -D books
#+end_src

*** PostgereSQLクライアントのコマンド（参考）
    - psqlでDBにログイン

| Backslashコマンド | 説明               |
|-------------------+--------------------|
| l                 | DBの一覧           |
| c                 | DBに接続           |
| d                 | リレーションの一覧 |
| q                 | 終了               |
** RoRアプリのテスト
*** テストについて
**** ガイド
    - [[http://guides.rubyonrails.org/testing.html][A Guide to Testing Rails Applications — Ruby on Rails Guides]]

*** テストの実行
**** テストコード
     - Scaffoldはテストコードも作成してくれる
     - テスト用のDB（ =rails_enpit_test= ）が更新される
**** コマンド
#+begin_src bash
bin/rake test
#+end_src

** Travis CIとの連携
*** Travis CIのアカウント作成
**** アカウントの作り方
    - 次のページにアクセスし，画面右上の「Sign in with GitHub」のボタンを押す
      - [[https://travis-ci.org/][Travis CI - Free Hosted Continuous Integration Platform for the Open Source Community]]
    - GitHubの認証ページが出るので，画面下部にある緑のボタンを押す
    - Travis CIから確認のメールが来るので，確認する
**** Ruby アプリ
    − [[http://docs.travis-ci.com/user/languages/ruby/][Travis CI: Building a Ruby Project]]

*** Travisの初期化
**** 内容
     - Travis の CI ツール
       - [[https://github.com/travis-ci/travis.rb][travis-ci/travis.rb]]
     - Travisにログインして初期化を行う
     - =init= すると =.travis.yml= ができる
**** コマンド

#+begin_src bash
gem install travis     # Travis CLIのアップデート
travis login --auto    # GitHubのログイン情報で自動ログイン
travis init            # 質問には全てEnterを押す
#+end_src

# gem update --system 2.4.6

*** Herokuとの連携
**** Herokuとの連携
     - Travis CIからHerokuへの接続を設定する
       - [[http://docs.travis-ci.com/user/deployment/heroku/][Travis CI: Heroku Deployment]]
**** コマンド
#+begin_src bash
travis setup heroku
#+end_src

*** Travisで動かすRubyのバージョン設定
**** 設定ファイルの変更
     - まず、Rubyのバージョンを指定する
     - 変更の際はYAMLのインデントに注意する
**** .travis.yml を書き換える
#+begin_src yaml
language: ruby
rvm:
- 2.2.2
#+end_src

*** Travis用DB設定ファイル
**** TravisでのテストDB
     - テストDB用の設定ファイルを追加する

**** =config/database.yml.travis=
#+begin_src yaml
test:
  adapter: postgresql
  database: travis_ci_test
  username: postgres
#+end_src

*** Travis上のDB設定
**** 設定ファイルの変更（追加）
     - PostgreSQLのバージョン
     - DBの作成
     - [[http://docs.travis-ci.com/user/using-postgresql/][Travis CI: Using PostgreSQl on Travis CI]]

**** .travis.yml（抜粋）
#+begin_src yaml
addons:
  postgresql: "9.3"
before_script:
  - psql -c 'create database travis_ci_test;' -U postgres
  - cp config/database.yml.travis config/database.yml
  - rake db:migrate RAILS_ENV=test # いらない？
#+end_src

*** GitHubとTravis CI連携
**** 説明
     - ここまでの設定で，GitHubにpushされたコードは，
       Travis CIでテストされ，テストが通ったコミットが
       Herokuに送られるようになった
     - WebブラウザでTravis CIを開いて確認する
**** コマンド
#+begin_src bash
git add .
git commit -m 'Configure Travis CI'
git push
#+end_src

*** Travis経由でのHerokuへのdeploy
**** Travisのログを閲覧
     - WebブラウザでTravis CIの画面を開く
     - ログを読む
**** HerokuへのDeploy
     - テストが通れば，自動でHerokuに配備される
     - 配備できたらWebブラウザでアプリのページを開いて確認する
** 演習課題
*** 演習課題7-1
**** =rails_enpit= の拡張
    - Viewを変更
      - welcomeコントローラのviewから，
        booksコントローラのviewへのリンクを追加する etc
    - Scaffoldの追加
      - 任意のScaffoldを追加してみなさい
      - DBのmigrationを行い，動作確認しなさい
    - Herokuへの配備
      - Travis経由でHerokuへdeployできるようにする
* 第8章 楽天APIを利用したアプリケーション
** 楽天API
*** 楽天APIとは？
    - [[http://webservice.rakuten.co.jp/document/][楽天ウェブサービス: API一覧]]

*** サンプルアプリ
    - [[https://github.com/ychubachi/rakuten_enpit_example][ychubachi/rakuten_enpit_example]]
      - =git clone= する
      - =bundle install= する
    - Herokuでアプリを作りアプリURLを取得
      - =heroku create= する

*** アプリIDの発行
    - 新規アプリを登録する
      - [[https://webservice.rakuten.co.jp/app/create][楽天ウェブサービス: 新規アプリ登録]]
    - アプリ名（任意），アプリのURL，認証コードを入力
      - アプリID，アフィリエイトID等を控えておく

*** 環境変数の設定
   - アプリID（APPID）とアフィリエイトID（AFID）を環境変数に登録
   - =~/.bash_profile= に次の行を追加（自分のID等に書き換えること）
   - =exit= して，再度 =vagrant ssh=

#+begin_src bash
export APPID=102266705971259xxxx
export AFID=11b23d92.8f6b6ff4.11b23d93.???????
#+end_src

*** ローカルでの動作確認
   - ローカルで動作確認する

#+begin_src bash
ruby hello.rb -o 0.0.0.0
#+end_src

** Herokuで動作させる
*** Herokuの環境変数
**** 環境変数の作成
   - 次のコマンドで，Heroku内部にも環境変数を作る
   - 参考
     - [[https://devcenter.heroku.com/articles/config-vars][Configuration and Config Vars | Heroku Dev Center]]
**** コマンド
#+begin_src bash
heroku config:set APPID=102266705971259xxxx
heroku config:set AFID=11b23d92.8f6b6ff4.11b23d93.???????
#+end_src

*** Herokuでの動作確認
**** 内容
   - Herokuに直接Pushしてみる
   - webブラウザで動作確認

**** コマンド
#+begin_src bash
git push heroku master
#+end_src

** Travis CI連携
*** .travis.ymlの再生成
**** 内容
    - =fork= して作業用のブランチを作成する
    - .travis.yml の削除と新規作成
    - 不要なRubyのバージョンを削除
**** コマンド
#+begin_src bash
git fork
git branch new_feature
rm .travis.yml
travis init
travis setup heroku
emacs .travis.yml
#+end_src

*** Travis CIの環境変数
**** 内容
    - リポジトリで次のコマンドを打つ
    - 自分のAPPID，AFIDに書き換えること
**** コマンド
#+begin_src bash
travis env set APPID 102266705971259xxxx
travis env set AFID 11b23d92.8f6b6ff4.11b23d93.???????
#+end_src

*** コミットしてpush
**** 内容
     - =add= して =commit=
     - 自分のリポジトリにpush
**** コマンド
#+begin_src bash
git add .
git commit -m 'Update .travis.yml'
git push -u ychubach master
#+end_src

** 演習課題
*** 演習課題8-1
**** ローカルでサンプルを動かす
    - 自分のAPPIDを作成する
    - 仮想化環境とHerokuの環境変数を設定
    - ローカルで動かしてみよう
    - Herokuに直接Pushして動かしてみよう
*** 演習課題8-2
**** Travis経由で動かす
    - サンプルをTravis経由で動作させてみよう
      - Forkして，自分のリポジトリにpushできるようにする
      - =.travis.yml= の設定を変更する
       	- やり方は各自で考えてみよう
      - Travis CIに環境変数を設定する

* 第9章 ミニプロジェクト
** 演習課題
*** 演習課題9
**** ミニプロジェクト
    - 楽天APIを利用したWebアプリケーションを開発する
    - グループで次のことを相談
      - プロダクトバックログをGitHub の Issue で作る
      - 見積もりなど Scrum 的にやってみよう
    - 授業で取り扱った内容のほか自分の知っている知識を活用してください
      - JavaScript，CSS ...
    - その他
      - README.md に使い方，HerokuのURLなどを書く
      - LICENCE は必ず設定する

* 補足資料
*** .gitignoreについて
    - Gitに登録したくないファイルは.gitignoreに登録する
    - 例
      - [[https://github.com/github/gitignore/blob/master/Global/Emacs.gitignore][gitignore/Emacs.gitignore at master · github/gitignore]]
*** HerokuのアプリのURL確認
#+begin_src bash
heroku apps:info
#+end_src

*** Herokuのログをリアルタイムで見る
#+begin_src bash
heroku logs --tail
#+end_src

*** =rails generate= などが動かない
    - [[https://devcenter.heroku.com/articles/getting-started-with-rails4#write-your-app][Write your App]]

#+begin_src bash
spring stop
#+end_src

*** 仮想環境内にファイル（画像など）
    - Guest OS内に =/vagrant= という共有フォルダがある
    - このフォルダはHost OSからアクセスできる
    - 場所はVagrantfileがあるフォルダ

*** Status Image
     - README.mdを編集し，Travisのテスト状況を表示するStatus Imageを追加する
     - [[http://docs.travis-ci.com/user/status-images/][Travis CI: Status Images]]
*** Webアプリケーションの共同開発（ペア）
    - 2人でペアを組み，1つのWebアプリケーションを開発しなさい
      - 何を作るかは，ペアで相談してください
    - 授業で取り上げたツールを使い，自由に試しなさい
    - 利用するフレームワークは，SinatraでもRailsでもどちらでもかまいません
      - どちらを使うかは，ペアで相談して決めてください
*** 補足：Sinatraでテストが通るようにする
**** Gemfileに =rake= を追加する

#+begin_src bash
gem 'rake'
#+end_src

**** Rakefileを作成する

#+begin_src ruby
task :default => :test

require 'rake/testtask'

Rake::TestTask.new do |t|
  t.pattern = "./*_test.rb"
end
#+end_src

